<!doctype html>
<html lang="ko">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>단어 시험기</title>
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial; max-width:800px; margin:40px auto; padding:20px; line-height:1.5; color:#111; }
    h1 { margin:0 0 10px 0; font-size:24px; }
    .card { border:1px solid #e0e0e0; border-radius:8px; padding:18px; box-shadow: 0 6px 18px rgba(0,0,0,0.03); }
    .word { font-size:28px; font-weight:700; margin-bottom:12px; }
    .hint { color:#666; margin-bottom:12px; }
    input[type="text"]{ width:100%; padding:10px; font-size:16px; border:1px solid #ccc; border-radius:6px; box-sizing:border-box; }
    .controls { margin-top:12px; display:flex; gap:8px; flex-wrap:wrap; }
    button { padding:10px 12px; border-radius:6px; border:1px solid #bbb; background:#fff; cursor:pointer; }
    button.primary { background:#111; color:#fff; border-color:#111; }
    .result { margin-top:12px; font-weight:700; }
    .correct { color: #0a7b3d; }
    .wrong { color: #c02a2a; }
    .small { font-size:13px; color:#555; margin-top:8px; }
    .area { margin-top:16px; display:grid; gap:8px; }
    textarea{ width:100%; min-height:120px; padding:10px; border-radius:6px; border:1px solid #ccc; }
    label{ font-weight:600; font-size:14px; }
    .flex { display:flex; gap:8px; align-items:center; }
    .stats { margin-top:10px; color:#444; font-size:14px; }
    .list-preview{ margin-top:10px; max-height:160px; overflow:auto; border-top:1px dashed #eee; padding-top:10px; font-size:13px; color:#333;}
  </style>
</head>
<body>
  <h1>단어 시험기</h1>
  <div class="card">
    <div class="word" id="displayWord">로드 중…</div>
    <div class="hint" id="displayLang">언어: —</div>

    <input id="answerInput" type="text" autocomplete="off" placeholder="정답을 입력하고 Enter 또는 확인 버튼을 누르세요" />

    <div class="controls">
      <button id="checkBtn" class="primary">확인</button>
      <button id="nextBtn">다음</button>
      <button id="showBtn">정답 보기</button>
      <button id="resetBtn">문제 초기화(다섯 문제 전부)</button>
      <label style="margin-left:auto;" title="문제 출제 방식">랜덤 방향
        <input id="randDir" type="checkbox" checked />
      </label>
    </div>

    <div class="result" id="resultArea"></div>
    <div class="small" id="feedbackExtra">정답이 틀리면 정답과 함께 채점됩니다.</div>
    <div class="stats" id="statsArea"></div>
  </div>

  <div class="area">
    <div class="card">
      <label>단어 추가 (영어 / 한국어)</label>
      <div class="flex">
        <input id="addEn" type="text" placeholder="영어 (예: declare)" />
        <input id="addKo" type="text" placeholder="한국어 뜻 (예: 선언하다)" />
        <button id="addBtn">추가</button>
      </div>
      <div class="small">추가하면 바로 현재 목록에 저장됩니다. 동일 단어는 덮어쓰기됩니다.</div>
    </div>

    <div class="card">
      <label>단어 목록 불러오기 / 내보내기 (CSV: 영어,한국어)</label>
      <textarea id="ioArea" placeholder="예: declare,선언하다&#10;recognition,알아봄, 인식"></textarea>
      <div class="flex">
        <button id="importBtn">불러오기 (CSV 붙여넣기)</button>
        <button id="exportBtn">내보내기 (CSV 다운로드)</button>
        <button id="clearStorageBtn">저장 삭제(초기화)</button>
      </div>
      <div class="small">CSV 한 줄당 영어와 한국어를 쉼표로 구분. 여러 뜻은 쉼표로 이어붙여도 됩니다.</div>
    </div>

    <div class="card">
      <label>단어 목록 미리보기</label>
      <div class="list-preview" id="listPreview"></div>
      <div class="small">로컬에 저장되어 브라우저를 닫아도 유지됩니다.</div>
    </div>
  </div>

  <script>
    // 초기 단어 목록 (사용자가 준 목록)
    const DEFAULT_WORDS = [
      { en: "declare", ko: "선언하다" },
      { en: "recognition", ko: "알아봄, 인식" },
      { en: "commitment", ko: "약속, 전념" },
      { en: "ease", ko: "쉬움, 용이함, 편의성" },
      { en: "domestic", ko: "국내의" },
      { en: "tension", ko: "긴장 상태" },
      { en: "concern", ko: "(사람에게) 영향을 미치다[관련되다], 배려, 염려" },
      { en: "humanitarian", ko: "인도주의적인" },
      { en: "crisis", ko: "위기" },
      { en: "conference", ko: "회의" },
      { en: "condemned", ko: "비난받은, 유죄 선고를 받은" },
      { en: "lasting", ko: "영속적인" },
      { en: "settlement", ko: "합의" },
      { en: "occupation", ko: "직업" },
      { en: "absurd", ko: "우스꽝스러운, 터무니없는" },
      { en: "insist", ko: "고집하다" },
      { en: "senior", ko: "고위" },
      { en: "further", ko: "더 멀리에" },
      { en: "sanction", ko: "제재" },
      { en: "elected", ko: "선출된" },
      { en: "criticism", ko: "비판" },
      { en: "response", ko: "대답, 응답, 회신, 답장" },
      { en: "expected", ko: "예상되는" },
      { en: "annual", ko: "매년의" },
      { en: "prime minister", ko: "수상" },
      { en: "secure", ko: "안심하는" },
      { en: "alongside", ko: "옆에, 나란히" },
      { en: "a viable", ko: "가능한" },
      { en: "neither", ko: "도 마찬가지이다" },
      { en: "attempt", ko: "시도, 시도하다" },
      { en: "brutal", ko: "잔혹한, 악랄한" },
      { en: "genuine", ko: "진짜의, 진품의" },
      { en: "exact", ko: "정확한" },
      { en: "opposite", ko: "다른 편" },
      { en: "concluded", ko: "결론[판단]을 내리다" },
      { en: "relentless", ko: "수그러들지 않는" },
      { en: "increasing", ko: "증대[증가]하는" },
      { en: "bombardment", ko: "포격" },
      { en: "offensive", ko: "모욕적인" },
      { en: "starvation", ko: "기아, 굶주림" },
      { en: "devastation", ko: "대대적인 파괴" },
      { en: "utterly", ko: "완전히" },
      { en: "intolerable", ko: "견딜[참을] 수 없는" },
      { en: "horrify", ko: "몸서리치게[소름끼치게] 만들다" }
    ];

    // 로컬 저장 키
    const STORAGE_KEY = "vocab_tester_words_v1";

    // UI 엘리먼트
    const displayWord = document.getElementById("displayWord");
    const displayLang = document.getElementById("displayLang");
    const answerInput = document.getElementById("answerInput");
    const checkBtn = document.getElementById("checkBtn");
    const nextBtn = document.getElementById("nextBtn");
    const showBtn = document.getElementById("showBtn");
    const resetBtn = document.getElementById("resetBtn");
    const randDir = document.getElementById("randDir");
    const resultArea = document.getElementById("resultArea");
    const statsArea = document.getElementById("statsArea");
    const addEn = document.getElementById("addEn");
    const addKo = document.getElementById("addKo");
    const addBtn = document.getElementById("addBtn");
    const ioArea = document.getElementById("ioArea");
    const importBtn = document.getElementById("importBtn");
    const exportBtn = document.getElementById("exportBtn");
    const clearStorageBtn = document.getElementById("clearStorageBtn");
    const listPreview = document.getElementById("listPreview");

    let words = [];
    let current = null; // { en, ko, showLang: 'en'|'ko' }
    let stats = { total:0, correct:0, wrong:0 };

    // 저장/불러오기
    function loadWords() {
      try {
        const s = localStorage.getItem(STORAGE_KEY);
        if (s) {
          const parsed = JSON.parse(s);
          if (Array.isArray(parsed) && parsed.length>0) { words = parsed; return; }
        }
      } catch(e){}
      words = DEFAULT_WORDS.slice();
      saveWords();
    }
    function saveWords() {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(words));
      renderListPreview();
    }
    function clearSaved() {
      localStorage.removeItem(STORAGE_KEY);
      loadWords();
      pickWord();
      updateStatsDisplay();
    }

    // 문제 선택
    function pickWord() {
      if (!words || words.length===0) {
        displayWord.textContent = "단어 목록이 비었습니다. 단어를 추가하세요.";
        displayLang.textContent = "";
        return;
      }
      const idx = Math.floor(Math.random()*words.length);
      const w = words[idx];
      const showLangChoice = randDir.checked ? (Math.random()<0.5 ? "en":"ko") : "en"; // randDir 체크 시 영어/한글 랜덤, 아니면 영어->한글
      current = { en: w.en.trim(), ko: w.ko.trim(), showLang: showLangChoice };
      renderCurrent();
    }

    function renderCurrent() {
      if(!current){ displayWord.textContent=""; displayLang.textContent=""; return; }
      if (current.showLang === "en") {
        displayWord.textContent = current.en;
        displayLang.textContent = "문제 언어: 영어 (영어 → 한국어 입력)";
      } else {
        displayWord.textContent = current.ko;
        displayLang.textContent = "문제 언어: 한국어 (한국어 → 영어 입력)";
      }
      answerInput.value = "";
      answerInput.focus();
      resultArea.textContent = "";
    }

    // 정답 검사 (다중 정답 허용: ko 쪽은 쉼표로 구분된 여러 뜻, en 쪽도 마찬가지)
    function normalizeAnswer(s) {
      return s.replace(/\s+/g,' ').trim().toLowerCase();
    }

    function acceptedAnswersFrom(expectedRaw) {
      // 쉼표(,)로 구분된 여러 정답 허용. 또한 슬래시(/)로 나뉘어 있을 수도 있으므로 처리.
      const parts = expectedRaw.split(/[,\/]+/).map(p => normalizeAnswer(p)).filter(Boolean);
      return parts.length ? parts : [normalizeAnswer(expectedRaw)];
    }

    function checkAnswer() {
      if (!current) return;
      const user = normalizeAnswer(answerInput.value);
      if (!user) { resultArea.innerHTML = '<span class="wrong">입력값이 비었습니다.</span>'; return; }

      if (current.showLang === "en") {
        // expect ko -> user should be korean. Accept if user's normalized matches any ko variant.
        const opts = acceptedAnswersFrom(current.ko);
        const match = opts.some(opt => user === opt);
        stats.total++;
        if (match) { stats.correct++; resultArea.innerHTML = '<span class="correct">맞았습니다.</span>'; }
        else {
          stats.wrong++;
          resultArea.innerHTML = '<span class="wrong">틀렸습니다.</span><div class="small">정답 예시: ' + escapeHtml(current.ko) + '</div>';
        }
      } else {
        // show ko, expect en
        const opts = acceptedAnswersFrom(current.en);
        const match = opts.some(opt => user === opt);
        stats.total++;
        if (match) { stats.correct++; resultArea.innerHTML = '<span class="correct">맞았습니다.</span>'; }
        else {
          stats.wrong++;
          resultArea.innerHTML = '<span class="wrong">틀렸습니다.</span><div class="small">정답 예시: ' + escapeHtml(current.en) + '</div>';
        }
      }
      updateStatsDisplay();
    }

    function escapeHtml(s){ return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }

    function showAnswer() {
      if (!current) return;
      const ans = (current.showLang==="en") ? current.ko : current.en;
      resultArea.innerHTML = '<div class="small">정답: ' + escapeHtml(ans) + '</div>';
    }

    function nextQuestion() {
      pickWord();
    }

    function updateStatsDisplay() {
      statsArea.textContent = `문제: ${stats.total} | 맞음: ${stats.correct} | 틀림: ${stats.wrong}`;
    }

    // 단어 추가
    function addWord() {
      const e = addEn.value.trim();
      const k = addKo.value.trim();
      if (!e || !k) {
        alert("영어와 한국어를 모두 입력하세요.");
        return;
      }
      // 같은 영어 단어가 있으면 덮어쓰기
      const idx = words.findIndex(w => w.en.trim().toLowerCase() === e.toLowerCase());
      if (idx >= 0) words[idx] = { en: e, ko: k };
      else words.push({ en: e, ko: k });
      saveWords();
      addEn.value=""; addKo.value="";
      pickWord();
    }

    // CSV import/export
    function importCSV() {
      const text = ioArea.value.trim();
      if (!text) { alert("붙여넣을 CSV 내용을 입력하세요."); return; }
      const lines = text.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
      let added = 0;
      for (const line of lines) {
        // split only on first comma to allow commas in Korean but user said CSV english,ko
        const parts = line.split(',');
        if (parts.length < 2) continue;
        const en = parts[0].trim();
        const ko = parts.slice(1).join(',').trim(); // 나머지 모두 ko로
        if (!en || !ko) continue;
        const idx = words.findIndex(w=>w.en.trim().toLowerCase()===en.toLowerCase());
        if (idx>=0) words[idx] = { en, ko };
        else words.push({ en, ko });
        added++;
      }
      saveWords();
      alert(added + "건 반영되었습니다.");
      ioArea.value = "";
      pickWord();
    }

    function exportCSV() {
      const csv = words.map(w => `${w.en.replace(/"/g,'""')},${w.ko.replace(/"/g,'""')}`).join("\n");
      const blob = new Blob([csv], {type: 'text/csv;charset=utf-8;'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'vocab_export.csv';
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
    }

    function renderListPreview() {
      if(!words || words.length===0){ listPreview.textContent = "단어 없음"; return; }
      listPreview.innerHTML = words.map(w => `<div><strong>${escapeHtml(w.en)}</strong> — ${escapeHtml(w.ko)}</div>`).join("");
    }

    // 유틸
    answerInput.addEventListener("keydown", function(e){
      if (e.key === "Enter") { checkAnswer(); }
    });
    checkBtn.addEventListener("click", checkAnswer);
    nextBtn.addEventListener("click", nextQuestion);
    showBtn.addEventListener("click", showAnswer);
    resetBtn.addEventListener("click", function(){
      stats = { total:0, correct:0, wrong:0 };
      updateStatsDisplay();
      pickWord();
      resultArea.textContent = '';
    });

    addBtn.addEventListener("click", addWord);
    importBtn.addEventListener("click", importCSV);
    exportBtn.addEventListener("click", exportCSV);
    clearStorageBtn.addEventListener("click", function(){
      if (confirm("정말로 저장된 단어를 삭제하고 초기 상태로 되돌리시겠습니까?")) {
        clearSaved();
      }
    });

    // 초기화
    loadWords();
    renderListPreview();
    pickWord();
    updateStatsDisplay();

    // (선택) 단어 더블클릭으로 바로 편집 기능: 목록에서 단어 클릭하면 add칸에 불러오기
    listPreview.addEventListener("dblclick", function(e){
      const target = e.target;
      if (!target) return;
      const text = target.textContent || "";
      // "english — korean" 형태
      const parts = text.split('—');
      if (parts.length>=2) {
        addEn.value = parts[0].trim();
        addKo.value = parts.slice(1).join('—').trim();
        addEn.focus();
      }
    });

    // 페이지 떠날 때 저장 (이미 저장중이긴 함)
    window.addEventListener("beforeunload", ()=> saveWords());
  </script>
</body>
</html>
